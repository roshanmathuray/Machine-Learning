# -*- coding: utf-8 -*-
"""GMM and BIRCH for Customer Identity and Brand Loyalty.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BYsryHdEIHNvFM7RodUHACvn8Zlkwv1u
"""

import streamlit as st
import pandas as pd

# Streamlit file uploader
uploaded_file = st.file_uploader("Choose a file", type=["csv", "txt"])

if uploaded_file is not None:
    # If a file is uploaded, read it
    df = pd.read_csv(uploaded_file)
    st.write(df.head())  # Display the first few rows

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# 
# # Streamlit file uploader
# uploaded_file = st.file_uploader("Choose a file", type=["csv", "txt"])
# if uploaded_file is not None:
#     # If a file is uploaded, read it
#     df = pd.read_csv(uploaded_file)
#     st.write(df.head())  # Display the first few rows
#

import pandas as pd

df = pd.read_csv("marketing_campaign.csv", sep="\t")  # or adjust the separator if needed
df.head()

identity_loyalty_features = [
    "Income", "Recency", "MntWines", "MntFruits", "MntMeatProducts",
    "MntFishProducts", "MntSweetProducts", "MntGoldProds", "NumWebPurchases",
    "NumStorePurchases", "NumCatalogPurchases", "NumWebVisitsMonth", "NumDealsPurchases"
]

df_identity_loyalty = df[identity_loyalty_features].copy()

from sklearn.preprocessing import StandardScaler

# Fill missing values with the median of each column
df_identity_loyalty.fillna(df_identity_loyalty.median(), inplace=True)

# Standardize the data for clustering
scaler = StandardScaler()
df_identity_loyalty_scaled = scaler.fit_transform(df_identity_loyalty)

# Convert back to DataFrame
df_identity_loyalty_scaled = pd.DataFrame(df_identity_loyalty_scaled, columns=df_identity_loyalty.columns)

# Check the first few rows
df_identity_loyalty_scaled.head()

from sklearn.cluster import Birch

# Apply BIRCH clustering (3 clusters)
birch = Birch(n_clusters=3)
df_identity_loyalty_scaled["BIRCH_Cluster"] = birch.fit_predict(df_identity_loyalty_scaled)

# Check the distribution of clusters
df_identity_loyalty_scaled["BIRCH_Cluster"].value_counts()

from sklearn.mixture import GaussianMixture

# Apply GMM clustering (3 clusters)
gmm = GaussianMixture(n_components=3, random_state=42)
df_identity_loyalty_scaled["GMM_Cluster"] = gmm.fit_predict(df_identity_loyalty_scaled)

# Check the distribution of clusters
df_identity_loyalty_scaled["GMM_Cluster"].value_counts()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns

# Reduce to 2 dimensions for visualization
pca = PCA(n_components=2)
df_pca = pca.fit_transform(df_identity_loyalty_scaled.drop(columns=["BIRCH_Cluster", "GMM_Cluster"]))

# Convert to DataFrame
df_identity_loyalty_scaled["PCA_1"] = df_pca[:, 0]
df_identity_loyalty_scaled["PCA_2"] = df_pca[:, 1]

# Plot BIRCH clusters
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
sns.scatterplot(x="PCA_1", y="PCA_2",
                hue="BIRCH_Cluster",
                data=df_identity_loyalty_scaled,
                palette="viridis")
plt.title("BIRCH Clustering - Customer Identity & Brand Loyalty")
plt.xlabel("PCA Feature 1")
plt.ylabel("PCA Feature 2")

# Plot GMM clusters
plt.subplot(1, 2, 2)
sns.scatterplot(x="PCA_1", y="PCA_2",
                hue="GMM_Cluster",
                data=df_identity_loyalty_scaled,
                palette="coolwarm")
plt.title("GMM Clustering - Customer Identity & Brand Loyalty")
plt.xlabel("PCA Feature 1")
plt.ylabel("PCA Feature 2")

plt.tight_layout()
plt.show()

# Group data by BIRCH clusters
df_identity_loyalty_scaled.groupby("BIRCH_Cluster").mean()